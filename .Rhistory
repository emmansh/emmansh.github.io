reticulate::use_virtualenv("./posts/2022-11-10-my-first-post/env", required = TRUE)
reticulate::use_virtualenv("./env", required = TRUE)
reticulate::py_list_packages()
reticulate::py_config()
# R
library(DBI)
library(duckdb)
library(ggplot2)
# R
## create connection to SQL database
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "duckdb")
## copy mpg dataset from ggplot2 onto the SQL database, via `con`
dbWriteTable(con, "mpg", ggplot2::mpg, overwrite = TRUE)
custom_print <- function(x) {
paste(knitr::kable(x, format = "markdown"), collapse = "\n")
}
knitr::opts_knit$set(sql.print = custom_print)
library(DT)
library(DT)
DT::datatable(tab)
reticulate::use_virtualenv("./env", required = TRUE)
# R
library(DBI)
library(duckdb)
library(ggplot2)
# R
## create connection to SQL database
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "duckdb")
## copy mpg dataset from ggplot2 onto the SQL database, via `con`
dbWriteTable(con, "mpg", ggplot2::mpg, overwrite = TRUE)
custom_print <- function(x) {
paste(knitr::kable(x, format = "markdown"), collapse = "\n")
}
knitr::opts_knit$set(sql.print = custom_print)
DT::datatable(ggplot2::mpg)
DT::datatable(tab)
DT::datatable(tab_sql)
reticulate::repl_python()
import pandas as pd
import numpy as np
x = [1,2,np.nan]
y = [3,4,5]
df = pd.DataFrame({'x':x,'y':y})
df
quit
DT::datatable(tab_py)
reticulate::repl_python()
import pandas as pd
import numpy as np
x = [1,2,np.nan]
y = [3,4,5]
pd.DataFrame({'x':x,'y':y})
quit
quit
DT::datatable(tab_py)
reticulate::repl_python()
import pandas as pd
import numpy as np
x = [1,2,np.nan]
y = [3,4,5]
df = pd.DataFrame({'x':x,'y':y})
quit
DT::datatable(py$df)
reticulate::repl_python()
import pandas as pd
import numpy as np
x = [1,2,np.nan]
y = [3,4,5]
df = pd.DataFrame({'x':x,'y':y})
quit
quit
DT::datatable(py$df)
py$df
library(reticulate)
reticulate::repl_python()
import pandas as pd
import numpy as np
x = [1,2,np.nan]
y = [3,4,5]
df = pd.DataFrame({'x':x,'y':y})
quit
quit
py$df
# DT::datatable(py$df)
DT::datatable(py$df)
reticulate::repl_python()
import pandas as pd
import numpy as np
x = [1,2,np.nan]
y = [3,4,5]
df = pd.DataFrame({'x':x,'y':y})
import pandas as pd
import numpy as np
x = [1,2,np.nan]
y = [3,4,5]
pd.DataFrame({'x':x,'y':y})
quit
DT::datatable(pytbl)
reticulate::repl_python()
import pandas as pd
import numpy as np
x = [1,2,np.nan]
y = [3,4,5]
df = pd.DataFrame({'x':x,'y':y})
quit
DT::datatable(py$df)
DT::datatable(ggplot2::mpg)
ggplot2::mpg |> count(manufacturer)
ggplot2::mpg |> dplyr::count(manufacturer)
?DT::datatable()
DT::datatable(ggplot2::mpg |> dplyr::select(manufacturer, displ, cty),
rawnames = FALSE)
library(reticulate)
use_virtualenv("./env", required = TRUE)
# R
library(DBI)
library(duckdb)
library(ggplot2)
reticulate::repl_python()
import pandas as pd
import numpy as np
x = [1,2,np.nan]
y = [3,4,5]
df = pd.DataFrame({'x':x,'y':y})
quit
py$df
#| echo: false
print_as_dt <- function(x){
DT::datatable(x,
rownames = FALSE,
options = list(
autoWidth = TRUE,
columnDefs = list(
list(className = 'dt-left', targets = "_all"),
list(width = '200px', targets = "_all")
)
)
)
}
print_as_dt(py$df)
py$df
options(htmlwidgets.TOJSON_ARGS = list(na = 'string'))
print_as_dt(py$df)
#| echo: false
library(reticulate)
use_virtualenv("./env", required = TRUE)
#| echo: false
# display NaN cells in DT::datatable()
options(htmlwidgets.TOJSON_ARGS = list(na = 'string')) # https://stackoverflow.com/a/48694410/6105259
print_as_dt <- function(x){
DT::datatable(x,
rownames = FALSE,
options = list(
dom = 'ltipr', # to remove search box; https://stackoverflow.com/a/61952067/6105259
autoWidth = TRUE,
columnDefs = list(
list(className = 'dt-left', targets = "_all"),
list(width = '200px', targets = "_all")
)
)
)
}
library(httr)
library(readr)
data_url_on_kaggle <- "https://www.kaggle.com/api/v1/datasets/download/michaelbryantds/witch-trials/trials.csv"
my_username <- "kaggle_username_from_json"
my_password <- "kaggle_key_from_json"
response_obj <- httr::GET(data_url_on_kaggle,
httr::authenticate(Sys.getenv("KAGGLE_USERNAME"), Sys.getenv("KAGGLE_PASSWORD"), type = "basic"))
df_via_content <- content(response_obj, type = "text/csv")
print_as_dt(df_via_content)
# df_via_read_csv <- read_csv(response_obj$url)
# print_as_dt(df_via_read_csv)
df_via_content
#| echo: false
# display NaN cells in DT::datatable()
options(htmlwidgets.TOJSON_ARGS = list(na = 'string')) # https://stackoverflow.com/a/48694410/6105259
print_as_dt <- function(x){
DT::datatable(x,
rownames = FALSE,
options = list(
dom = 'ltipr', # to remove search box; https://stackoverflow.com/a/61952067/6105259
autoWidth = TRUE,
columnDefs = list(
list(className = 'dt-left', targets = "_all"),
list(width = '200px', targets = "_all")
)
)
)
}
library(httr)
library(readr)
data_url_on_kaggle <- "https://www.kaggle.com/api/v1/datasets/download/michaelbryantds/witch-trials/trials.csv"
my_username <- "kaggle_username_from_json"
my_password <- "kaggle_key_from_json"
response_obj <- httr::GET(data_url_on_kaggle,
httr::authenticate(Sys.getenv("KAGGLE_USERNAME"), Sys.getenv("KAGGLE_PASSWORD"), type = "basic"))
df_via_content <- content(response_obj, type = "text/csv")
print_as_dt(df_via_content)
# df_via_read_csv <- read_csv(response_obj$url)
# print_as_dt(df_via_read_csv)
Sys.getenv("KAGGLE_USERNAME")
Sys.getenv("KAGGLE_PASSWORD")
#| echo: false
library(reticulate)
use_virtualenv("./env", required = TRUE)
reticulate::repl_python()
1 + 1
import opendatasets as od
help(od.download)
#| echo: false
library(reticulate)
use_virtualenv("./env", required = TRUE)
#| echo: false
library(reticulate)
use_virtualenv("./env", required = TRUE)
#| echo: false
library(reticulate)
use_virtualenv("./env", required = TRUE)
#| echo: false
reticuate::use_virtualenv("./env", required = TRUE)
#| echo: false
reticulate::use_virtualenv("./env", required = TRUE)
#| echo: false
reticulate::use_virtualenv("./env", required = TRUE)
library(tibble)
?DBI::dbConnect()
?DBI::dbDisconnect()
? knitr::kable()
?knitr::kable()
?kableExtra::kbl
kableExtra::kable_styling()
?kableExtra::kable_styling()
?kableExtra::kable_paper()?
?kableExtra::kable_paper()
?kableExtra::column_spec()
format(Sys.time(), '%d %B, %Y')
format(Sys.time(), '%d-%b-%Y')
format(Sys.time(), '%d-%m-%Y')
Sys.time()
