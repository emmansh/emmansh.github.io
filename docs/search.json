[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Emmanuel Shpigel",
    "section": "",
    "text": "I‚Äôm a data analyst, quantitative researcher, and back-end programmer at Kayma Labs. I have trained as an experimental researcher in the United States and Israel, and my work combines statistics, programming, and behavioral theory. I work in R, Python, SQL, & JavaScript.   I live in Israel with my wife and daughters. Outside of work I enjoy cookingüç≤ and gardeningüå±."
  },
  {
    "objectID": "posts/2022-11-10-Read-CSV-From-Kaggle/index.html#print-tables-from-r-python-and-sql-in-panel-tabset",
    "href": "posts/2022-11-10-Read-CSV-From-Kaggle/index.html#print-tables-from-r-python-and-sql-in-panel-tabset",
    "title": "Read CSV from Kaggle",
    "section": "Print tables from R, Python, and SQL in panel tabset",
    "text": "Print tables from R, Python, and SQL in panel tabset\n\nUtility function for nice printing\n\nlibrary(kableExtra)\n\nprint_table <- function(tbl, n_rows = 10){\n  tbl |> \n    head(n_rows) |> \n    kbl(row.names = FALSE) |> \n    kable_styling(bootstrap_options = \"striped\", full_width = FALSE, position = \"left\")\n}"
  },
  {
    "objectID": "posts/2022-11-10-Read-CSV-From-Kaggle/index.html#download-data-from-kaggle",
    "href": "posts/2022-11-10-Read-CSV-From-Kaggle/index.html#download-data-from-kaggle",
    "title": "Read CSV from Kaggle",
    "section": "Download data from Kaggle",
    "text": "Download data from Kaggle\n\nRPython\n\n\n\nlibrary(httr)\nlibrary(readr)\n\ndata_url_on_kaggle <- \"https://www.kaggle.com/api/v1/datasets/download/michaelbryantds/witch-trials/trials.csv\"\n\nkaggle_username <- Sys.getenv(\"KAGGLE_USERNAME\")\nkaggle_password <- Sys.getenv(\"KAGGLE_PASSWORD\")\n\nresponse_obj <- httr::GET(data_url_on_kaggle, \n                          httr::authenticate(kaggle_username, \n                                             kaggle_password, \n                                             type = \"basic\"))\n\n\ndf_via_content <- content(response_obj, type = \"text/csv\")\nprint_table(df_via_content)\n\n\n\n \n  \n    year \n    decade \n    century \n    tried \n    deaths \n    city \n    gadm.adm2 \n    gadm.adm1 \n    gadm.adm0 \n    lon \n    lat \n    record.source \n  \n \n\n  \n    NA \n    1520 \n    1500 \n    1 \n    1 \n    NA \n    NA \n    NA \n    Estonia \n    NA \n    NA \n    Madar (1990) \n  \n  \n    NA \n    1530 \n    1500 \n    1 \n    1 \n    NA \n    NA \n    NA \n    Estonia \n    NA \n    NA \n    Madar (1990) \n  \n  \n    NA \n    1540 \n    1500 \n    5 \n    5 \n    NA \n    NA \n    NA \n    Estonia \n    NA \n    NA \n    Madar (1990) \n  \n  \n    NA \n    1580 \n    1500 \n    7 \n    5 \n    NA \n    NA \n    NA \n    Estonia \n    NA \n    NA \n    Madar (1990) \n  \n  \n    NA \n    1590 \n    1500 \n    11 \n    0 \n    NA \n    NA \n    NA \n    Estonia \n    NA \n    NA \n    Madar (1990) \n  \n  \n    NA \n    1600 \n    1600 \n    6 \n    1 \n    NA \n    NA \n    NA \n    Estonia \n    NA \n    NA \n    Madar (1990) \n  \n  \n    NA \n    1610 \n    1600 \n    22 \n    18 \n    NA \n    NA \n    NA \n    Estonia \n    NA \n    NA \n    Madar (1990) \n  \n  \n    NA \n    1620 \n    1600 \n    14 \n    8 \n    NA \n    NA \n    NA \n    Estonia \n    NA \n    NA \n    Madar (1990) \n  \n  \n    NA \n    1630 \n    1600 \n    25 \n    4 \n    NA \n    NA \n    NA \n    Estonia \n    NA \n    NA \n    Madar (1990) \n  \n  \n    NA \n    1640 \n    1600 \n    39 \n    10 \n    NA \n    NA \n    NA \n    Estonia \n    NA \n    NA \n    Madar (1990) \n  \n\n\n\n\n\n\n\n\nimport requests\nimport os\nimport pandas as pd\n\nkaggle_username_py=os.getenv('KAGGLE_USERNAME_PY')\nkaggle_password_py=os.getenv('KAGGLE_PASSWORD_PY')\n\nresponse_obj_py=requests.get('https://www.kaggle.com/api/v1/datasets/download/michaelbryantds/witch-trials/trials.csv', auth=(kaggle_username_py, kaggle_password_py))\ndf_pandas=pd.read_csv(response_obj_py.url)\n\n\nprint_table(py$df_pandas)\n\n\n\n \n  \n    year \n    decade \n    century \n    tried \n    deaths \n    city \n    gadm.adm2 \n    gadm.adm1 \n    gadm.adm0 \n    lon \n    lat \n    record.source \n  \n \n\n  \n    NaN \n    1520 \n    1500 \n    1 \n    1 \n    NaN \n    NaN \n    NaN \n    Estonia \n    NaN \n    NaN \n    Madar (1990) \n  \n  \n    NaN \n    1530 \n    1500 \n    1 \n    1 \n    NaN \n    NaN \n    NaN \n    Estonia \n    NaN \n    NaN \n    Madar (1990) \n  \n  \n    NaN \n    1540 \n    1500 \n    5 \n    5 \n    NaN \n    NaN \n    NaN \n    Estonia \n    NaN \n    NaN \n    Madar (1990) \n  \n  \n    NaN \n    1580 \n    1500 \n    7 \n    5 \n    NaN \n    NaN \n    NaN \n    Estonia \n    NaN \n    NaN \n    Madar (1990) \n  \n  \n    NaN \n    1590 \n    1500 \n    11 \n    0 \n    NaN \n    NaN \n    NaN \n    Estonia \n    NaN \n    NaN \n    Madar (1990) \n  \n  \n    NaN \n    1600 \n    1600 \n    6 \n    1 \n    NaN \n    NaN \n    NaN \n    Estonia \n    NaN \n    NaN \n    Madar (1990) \n  \n  \n    NaN \n    1610 \n    1600 \n    22 \n    18 \n    NaN \n    NaN \n    NaN \n    Estonia \n    NaN \n    NaN \n    Madar (1990) \n  \n  \n    NaN \n    1620 \n    1600 \n    14 \n    8 \n    NaN \n    NaN \n    NaN \n    Estonia \n    NaN \n    NaN \n    Madar (1990) \n  \n  \n    NaN \n    1630 \n    1600 \n    25 \n    4 \n    NaN \n    NaN \n    NaN \n    Estonia \n    NaN \n    NaN \n    Madar (1990) \n  \n  \n    NaN \n    1640 \n    1600 \n    39 \n    10 \n    NaN \n    NaN \n    NaN \n    Estonia \n    NaN \n    NaN \n    Madar (1990)"
  },
  {
    "objectID": "posts/2022-11-13-Quarto-panel-tabset-R-Python-SQL/index.html#set-up-sql",
    "href": "posts/2022-11-13-Quarto-panel-tabset-R-Python-SQL/index.html#set-up-sql",
    "title": "Execute and Print Tables Cross-Language in Quarto",
    "section": "Set up SQL",
    "text": "Set up SQL\n\n# R\nlibrary(DBI)\nlibrary(duckdb)\nlibrary(ggplot2)\n\n\n# R\n## create connection to SQL database\ncon <- DBI::dbConnect(duckdb::duckdb(), dbdir = \":memory:\")\n## copy mpg dataset from ggplot2 onto the SQL database, via `con`\ndbWriteTable(con, \"mpg\", ggplot2::mpg, overwrite = TRUE)"
  },
  {
    "objectID": "posts/2022-11-13-Quarto-panel-tabset-R-Python-SQL/index.html#print-tables-from-r-python-and-sql-in-panel-tabset",
    "href": "posts/2022-11-13-Quarto-panel-tabset-R-Python-SQL/index.html#print-tables-from-r-python-and-sql-in-panel-tabset",
    "title": "Execute and Print Tables Cross-Language in Quarto",
    "section": "Print tables from R, Python, and SQL in panel tabset",
    "text": "Print tables from R, Python, and SQL in panel tabset\n\nUtility function for nice printing\n\nlibrary(kableExtra)\n\nprint_table <- function(tbl, n_rows = 10){\n  tbl |> \n    head(n_rows) |> \n    kbl(row.names = FALSE) |> \n    kable_styling(bootstrap_options = \"striped\", full_width = FALSE, position = \"left\")\n}\n\n\nRPythonSQL\n\n\n\nggplot2::mpg |> \n  dplyr::select(manufacturer, displ, cty) |> \n  print_table()\n\n\n\n \n  \n    manufacturer \n    displ \n    cty \n  \n \n\n  \n    audi \n    1.8 \n    18 \n  \n  \n    audi \n    1.8 \n    21 \n  \n  \n    audi \n    2.0 \n    20 \n  \n  \n    audi \n    2.0 \n    21 \n  \n  \n    audi \n    2.8 \n    16 \n  \n  \n    audi \n    2.8 \n    18 \n  \n  \n    audi \n    3.1 \n    18 \n  \n  \n    audi \n    1.8 \n    18 \n  \n  \n    audi \n    1.8 \n    16 \n  \n  \n    audi \n    2.0 \n    20 \n  \n\n\n\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\n\nx = [1,2,np.nan]\ny = [3,4,5]\ndf = pd.DataFrame({'x':x,'y':y})\n\n\n\n\n\n \n  \n    x \n    y \n  \n \n\n  \n    1 \n    3 \n  \n  \n    2 \n    4 \n  \n  \n    NaN \n    5 \n  \n\n\n\n\n\n\n\n\nSELECT manufacturer, displ, cty\nFROM mpg;\n\n\n\n\n\n \n  \n    manufacturer \n    displ \n    cty \n  \n \n\n  \n    audi \n    1.8 \n    18 \n  \n  \n    audi \n    1.8 \n    21 \n  \n  \n    audi \n    2.0 \n    20 \n  \n  \n    audi \n    2.0 \n    21 \n  \n  \n    audi \n    2.8 \n    16 \n  \n  \n    audi \n    2.8 \n    18 \n  \n  \n    audi \n    3.1 \n    18 \n  \n  \n    audi \n    1.8 \n    18 \n  \n  \n    audi \n    1.8 \n    16 \n  \n  \n    audi \n    2.0 \n    20"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Portfolio",
    "section": "",
    "text": "Here I list analyses I did.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExecute and Print Tables Cross-Language in Quarto\n\n\n\npython\n\n\nR\n\n\nSQL\n\n\nQuarto\n\n\npanel-tabset\n\n\n\n\n\n\n\n\n\n\nNov 13, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRead CSV from Kaggle\n\n\n\npython\n\n\nR\n\n\nread-csv\n\n\nauthentication\n\n\n\nHow to get data when authentication is needed\n\n\n\n\n\n\nOct 24, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  }
]